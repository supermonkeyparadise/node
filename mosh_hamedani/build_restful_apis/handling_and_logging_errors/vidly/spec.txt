Project 使用 yarn 安裝相關套件

使用 nodemon 執行，會一直偵測變更 @@


重點：
    1. Use [ express-async-errors ] library handling Rejected Promises
       exception 會導向 vidly/middleware/error.js 進行處理(error 500)，表示系統運算時，出現錯誤！！


    2. Use [ winston ] library to logging errors ===> 像 log4j
       
       將訊息輸出到檔案：
           winston.add(winston.transports.File, { filename: 'logfile.log' });

       紀錄訊息：  ( logging level: error, warn, info, verbose, debug, silly )
           winston.error(err.message, err);       

       紀錄層級：
           logging level: error, warn, info, verbose, debug, silly

           如果 level 設定為 info，則 error, warn, info 層級都會被記錄
           如果 level 設定為 error，則只有 error 層級都會被記錄


    3. Use [ winston-mongodb ] library logging to MongoDB


    4. error.js middleware
       ** 只能處理 request process 流程相關錯誤 **

       其餘就交給       
            process.on('uncaughtException', ex => {
                winston.error(ex.message, ex);
                // process.exit(1);
            });
       但這個解法，只能處理同步(sync)的錯誤!!
            throw new Error('Someting failed during startup');

       無法處理 async 錯誤！！
            const p2 = Promise.reject(new Error('Something failed miserably!'));
            p2.then(() => console.log('Done'));
       非同步(async) 的解法，如下
            process.on('unhandledRejection', ex => {
                winston.error(ex.message, ex);
                // process.exit(1);
            });


        進階解法：
            // FOR SYNC CODE
            process.on('uncaughtException', ex => {
                // winston.error(ex.message, ex);
                // process.exit(1);
            });

            // FOR ASYNC CODE
            process.on('unhandledRejection', ex => {
                // winston.error(ex.message, ex);
                // process.exit(1);

                // 將 async exception 轉換為 sync exception
                throw ex;
            });

            // 使用另一個 log file 紀錄 uncaughtException，不使用原本的 logfile.log 紀錄
            winston.handleExceptions(
                new winston.transports.File({ filename: 'uncaughtException.log' })
            );
    



